import argparse

parser = argparse.ArgumentParser()
parser.add_argument('--operating_mode', default='train', help='train|detection')
parser.add_argument('--dataset', default='netflow', help='netflow|es_flow|mnist')
parser.add_argument('--testdata', default='es_flow', help='es_flow|null')
parser.add_argument('--train', type=bool, default=True, help='True|False')
parser.add_argument('--continue_training', type=bool, default=True, help='True|False')
parser.add_argument('--device', default='cpu', help='cpu|gpu')
parser.add_argument("--n_epochs", type=int, default=200, help="200number of epochs of training")
parser.add_argument("--batch_size", type=int, default=64, help="size of the batches")
parser.add_argument("--lr", type=float, default=0.0002, help="adam: learning rate")
parser.add_argument("--b1", type=float, default=0.5, help="adam: decay of first order momentum of gradient")
parser.add_argument("--b2", type=float, default=0.999, help="adam: decay of first order momentum of gradient")
parser.add_argument("--n_cpu", type=int, default=8, help="number of cpu threads to use during batch generation")
parser.add_argument("--latent_dim", type=int, default=100, help="dimensionality of the latent space")
parser.add_argument("--latent_dim4flow", type=int, default=7, help="18dimensionality of the latent space")
parser.add_argument("--img_size", type=int, default=28, help="28or32size of each image dimension")
parser.add_argument("--flow_size", type=int, default=36, help="14or28size of each image dimension")
parser.add_argument("--dropout", type=float, default=0.2, help="dropout")
parser.add_argument("--output_size", type=int, default=1, help="output_size")
parser.add_argument("--channels", type=int, default=1, help="number of image channels")
parser.add_argument("--n_critic", type=int, default=5, help="number of training steps for discriminator per iter")
parser.add_argument("--clip_value", type=float, default=0.01, help="lower and upper clip value for disc. weights")
parser.add_argument("--sample_interval", type=int, default=400, help="interval betwen image samples")
parser.add_argument('--save_model4netflow_dir', default=r'D:\zpg\paper2\code\UEBA_GAN\gan4netflow\implementations\wgan_gp\model4netflow')
parser.add_argument('--save_checkpoint_dir', default=r'D:\zpg\paper2\code\UEBA_GAN\gan4netflow\implementations\wgan_gp\checkpoint')
parser.add_argument('--model4netflow_D_path', default=r'D:\...\gan4netflow\implementations\wgan_gp\模型保存\netflow\1005_model4netflow\221005discriminator_epoch_180.pth')
parser.add_argument('--model4netflow_G_path', default=r'D:\...\gan4netflow\implementations\wgan_gp\模型保存\netflow\1005_model4netflow\221005generator_epoch_180.pth')
parser.add_argument('--traindata_path', default=r'D:\zpg\paper2\code\UEBA_GAN\gan4netflow\data\flowdataset_h5\220929_flowdata_train.hdf5')
parser.add_argument('--testdata_path', default=r'D:\zpg\paper2\code\UEBA_GAN\gan4netflow\data\flowdataset_h5\220929_flowdata_test.hdf5')
opt = parser.parse_args()
print(opt)

img_shape = (opt.channels, opt.img_size, opt.img_size)
netmatrix = opt.flow_size
